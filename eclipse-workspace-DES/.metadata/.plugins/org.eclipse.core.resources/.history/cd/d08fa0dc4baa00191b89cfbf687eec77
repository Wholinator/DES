import java.util.Random;

public class DES {
	private byte[] key;
	private Random rand;
	
	public DES(byte[] key) {
		setRand();
		setKey(key);
	}
	
	public DES(String key) {
		setRand();
		
		byte[] b = key.getBytes();
		if (b.length == 7) {
			setKey(b);
		} else {
			System.out.println("Key not valid length: Generating new key");
			setKey(DESKey.genKey());
		}
	}
	
	public DES() {
		setRand();
		setKey(DESKey.genKey());
	}
	
	
	//encrypts plaintext
	@SuppressWarnings("unused")
	public String encrypt(String plaintext) {

		
		BitString[] bitBlocks = getBitBlocks(plaintext);
		
		BitString[] keySchedule = DESKey.getKeySchedule(key);
		
		processBlock(bitBlocks[0],  keySchedule);	
		
		return plaintext;
	}
	
	public BitString processBlock(BitString block, BitString[] keySchedule) {
		
		int[] initial_permutation = {58, 50, 42, 34, 26, 18, 10, 2,
					                 60, 52, 44, 36, 28, 20, 12, 4,
					                 62, 54, 46, 38, 30, 22, 14, 6,
					                 64, 56, 48, 40, 32, 24, 16, 8,
					                 57, 49, 41, 33, 25, 17, 9,  1,
					                 59, 51, 43, 35, 27, 19, 11, 3,
					                 61, 53, 45, 37, 29, 21, 13, 5,
					                 63, 55, 47, 39, 31, 23, 15, 7};
		

		
		block = block.applyPermutation(initial_permutation);
		
		BitString blockL = block.subString(0,  32);
		BitString blockR = block.subString(32, 64);
		
		
		BitString newb = fiestel(blockL, keySchedule[0]);
		//16 rounds of feistel function
		//   1: expand 32-bit to 48-bit with expansion permutation
		//   2: xor result with subkey of round
		//   3: divide into 8 pieces and process with s-boxes
		//   4: pbox it
		
		return null;
		
	}
	
	private BitString fiestel(BitString block, BitString roundKey) {
		int[] expansion_permutation = { 32, 1,  2,  3,  4,  5,
						                4,  5,  6,  7,  8,  9, 
						                8,  9,  10, 11, 12, 13,
						                12, 13, 14, 15, 16, 17,
						                16, 17, 18, 19, 20, 21,
						                20, 21, 22, 23, 24, 25,
						                24, 25, 26, 27, 28, 29, 
						                28, 29, 30, 31, 32, 1  };
		
		
		block = block.applyPermutation(expansion_permutation);

		block = block.xor(roundKey);
		
		System.out.println(block.toString());
		//TODO: divide into 8 pieces and s-box
		
		BitString one = block.subString(0,  6);
		BitString t = s1(one);
		//TODO: pbox it all together
		
		return null;
	}
	
	//transforms a string into an array of byte[8] arrays
	//each byte[8] array is 64 bits and considered a block in DES
	private byte[][] getByteBlocks(String plaintext) {
		byte[] bytes = plaintext.getBytes();
		int numBlocks = (int) Math.ceil(bytes.length / 8.0);
		
		byte[][] blocks = new byte[numBlocks][8];
		
		//counter for bytes
		int c = 0;
		//counter for block
		int block = 0;
		
		//iterate through every byte
		while (c < bytes.length) {
			//get our position in the block
			int byteNum = c % 8;
			
			//set the block:position to the sequential byte
			blocks[block][byteNum] = bytes[c];
			
			//move to the next block
			if (byteNum == 7) {
				block++;
			}
			c++;
		}
		return blocks;
	}
	
	//get an array of 64 bit blocks from plaintext
	private BitString[] getBitBlocks(String plaintext) {
		byte[][] byteBlocks = getByteBlocks(plaintext);
		
		int length = byteBlocks.length;
		
		BitString[] bitBlocks = new BitString[length];
		
		//convert every 8byte array to 64bitstring
		for(int i = 0; i < length; i++) {
			bitBlocks[i] = new BitString(byteBlocks[i]);
		}
		
		return bitBlocks;
	}

	
	//Getter: key
	public byte[] getKey() {
		return key;
	}

	//Setter: key
	public void setKey(byte[] key) {
		this.key = key;
	}
	
	
	public Random getRand() {
		return rand;
	}

	public void setRand() {
		this.rand = new Random(System.currentTimeMillis());
	}
	
	
	private BitString s1(BitString input) {
		int[][] permutation = {{14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7},
				               {0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8},
				               {4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0},
				               {15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13}};
		
		if (input.length != 6) {
			return null;
		}
		
		BitString b1 = input.subString(0,  1);
		BitString b2 = input.subString(input.length-1, input.length);
		
		byte ends = b1.concat(b2).getBytes()[0];
		
		byte middle = input.subString(1, 5).getBytes()[0];
		
		byte returnByte = (byte) permutation[ends][middle];
		
		return new BitString(returnByte);
		
	}
	
	private BitString s2(BitString input) {
		int[][] permutation = {{15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10},
			                   {3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5},
			                   {0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15},
			                   {13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9}};
		
		return input;
	}
	
	private BitString s3(BitString input) {
		int[][] permutation = {{10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8},
				               {13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1},
				               {13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7},
				               {1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12}};
		
		return input;
	}
	
	private BitString s4(BitString input) {
		int[][] permutation = {{7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15},
				               {13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9},
				               {10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4},
				               {3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14}};
		return input;
	}
	
	private BitString s5(BitString input) {
		int[][] permutation = {{2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9},
				               {14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6},
				               {4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14},
				               {11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3}};
		
		return input;
	}
	
	private BitString s6(BitString input) {
		int[][] permutation = {{12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11},
				               {10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8},
				               {9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6},
				               {4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13}};
		
		return input;
	}
	
	private BitString s7(BitString input) {
		int[][] permutation = {{4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1},
				               {13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6},
				               {1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2},
				               {6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12}};
		
		
		return input;
	}
	
	private BitString s8(BitString input) {
		int[][] permutation = {{13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7},
				               {1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2},
				               {7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8},
				               {2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11}};
		
		return input;
	}
	
	
	
}
