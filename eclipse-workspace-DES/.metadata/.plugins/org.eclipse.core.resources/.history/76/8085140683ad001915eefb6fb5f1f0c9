
public class BitString {
	private Bit[] bits;
	public int length;
	
	//single bit BitString constructor
	public BitString(Bit bit) {
		bits = initBits(new Bit[1]);
		setBit(0, bit);
		this.length = 1;
	}
	
	//bit array constructor
	public BitString(Bit[] bits) {
		this.bits = initBits(new Bit[bits.length]);
		
		//place every bit into BitArray
		for (int i = 0; i < bits.length; i++) {
			this.bits[i] = bits[i];
		}
		this.length = bits.length;
	}
	
	//Instantiates a BitString from an array of bytes
	public BitString(byte[] bytes) {
		int bitLength = 8 * bytes.length;
		
		//instantiate the bit array
		bits = initBits(new Bit[bitLength]);
		
		int byteNum = 0;
		for (int i = 0; i < bitLength; i++) {
			int index = i % 8;
			
			//acquire index value from the byteNum byte
			int value = (bytes[byteNum] >> index) & 1;

			//populate bitArray 
			//reverses order of bits in each individual byte because we read bits little-endian
			int index_to_change = (((byteNum + 1) * 8) - index) - 1;
			setBit(index_to_change, value);
			
			//every 8 bits, move to next byte
			if (i % 8 == 0 && i != 0) {
				byteNum++;
			}
		}
		
		this.length = bits.length;
	}
	
	//single byte bitstring constructor
	public BitString(byte b) {
		bits = initBits(new Bit[8]);
		
		for (int i = 0; i < 8; i++) {
			//right shift i bits, and with 1 to retrieve bit value at index i from right side
			int value = b >> i & 1;
		
			//set bits from right to left cause that's how we read them
			setBit(8-i-1, value);
		}
		this.length = 8;
	}
	
	//Instantiates a BitString of all 0 of a certain length
	public BitString(int length) {
		bits = initBits(new Bit[length]);
		
		this.length = length;
	}
	
	//Creates bit objects for a give bit array
	private Bit[] initBits(Bit[] b) {
		for (int i = 0; i < b.length; i++) {
			b[i] = new Bit();
		}
		
		return b;
	}
	
	//bitwise circular left shift
	public void leftShift() {
		//store first bit to wrap to back
		Bit firstBit = getBits()[0];
		
		//move each bit to index 1 lower
		for (int i = 1; i < length; i++) {
			setBit(i - 1, getBit(i));
		}
		//wrap first bit to the back
		setBit(length - 1, firstBit);
	}
	
	//bitwise circular right shift
	public void rightShift() {
		Bit lastBit = getBits()[length - 1];
		
		for (int i = length-2; i >= 0; i--) {
			setBit(i+1, getBit(i));
		}
		
		setBit(0, lastBit);
	}
	
	//returns sub section of BitString
	public BitString subString(int start, int end) {
		int length = end - start;
		
		BitString bitString = new BitString(length);
		
		for (int i = start; i < end; i++) {
			bitString.setBit(i - start, getBit(i));
		}
		
		return bitString;
	}
	
	//appends two BitStrings together
	public BitString append(BitString bitString) {
		
		BitString returnBits = new BitString(length + bitString.length);
		
		for (int i = 0; i < length; i++) {
			returnBits.setBit(i, getBit(i));
		}
		
		for (int i = 0; i < bitString.length; i++) {
			returnBits.setBit(i + length, bitString.getBit(i));
		}
		
		return returnBits;
	}
	
	//applies the desired permutation array to the BitString
	public BitString applyPermutation(int[] permutation) {
		BitString permuted = new BitString(permutation.length);
		
		for (int i = 0; i < permutation.length; i++) {
			int index = permutation[i] - 1;
			
			permuted.setBit(i, getBit(index));
		}
		
		return permuted;
	}
	
	//performs the xor function with self and argument
	public BitString xor(BitString bitString) {
		BitString returnBits;
		
		if (length == bitString.length) {
			returnBits = new BitString(length);
			
			for (int i = 0; i < length; i++) {
				//xor the bit values for this and arg strings and place at same index
				int value = getBits()[i].getValue() ^ bitString.getBit(i).getValue();
				returnBits.setBit(i, new Bit(value));
			}
		} else {
			returnBits = new BitString(1);
		}
		
		return returnBits;
	}
	
	//transforms the bitstring into a byte array
	public byte[] getBytes() {
		//get number of bytes required to hold length bits
		int byteLen = (int) Math.ceil(length / 8.0);
		byte[] byteArray = new byte[byteLen];
		
		for (int i = 0; i < byteLen; i++) {
			//get substring of 8 bytes from right to left
			BitString B;
			
			try {
				B = subString(length - ((i+1) * 8), length - (i * 8));
			} catch (ArrayIndexOutOfBoundsException e) {
				B = subString(0, length- (i * 8));
			}
			
			byte byt = Byte.parseByte(B.toString(), 2);
			
			byteArray[byteLen - i - 1] = byt;
		}
		return byteArray;
	}
	
	public BitString[] getBlocks(int blockLength) {
		int numBlocks = length / blockLength;
		BitString[] blocks = new BitString[numBlocks]; 
		
		if (length % blockLength == 0) {
			for (int i = 0; i < numBlocks; i++) {
				blocks[i] = subString((i * 64), (i+1) * 64);
			}
		}
		
		return blocks;
	}

	public Bit[] getBits() {
		return bits;
	}

	private void setBits(Bit[] bits) {
		this.bits = bits;
	}
	
	private void setBit(int index, int value) {
		bits[index].setValue(value);
	}
	
	private void setBit(int index, Bit bit) {
		bits[index] = bit;
	}
	
	public Bit getBit(int index) {
		return bits[index];
	}
	
	
	public boolean equals(BitString bitString) {
		boolean equals = true;
		
		//if same length
		if (length == bitString.length) {
			Bit[] bits1 = getBits();
			Bit[] bits2 = bitString.getBits();
			
			//check every bit values equality
			for (int i = 0; i < length; i++) {
				if (bits1[i].getValue() != bits2[i].getValue()) {
					equals = false;
				}
			}
		} 
		else {
			equals = false;
		}
		return equals;
	}
	
	//simply returns string containing all bit values in order
	public String toString() {
		String s = "";
		
		for (Bit b : bits) {
			s = s + b.getValue();
		}
		return s;
	}
	
}
