
public class TDES extends DES{
	DES des1, des2, des3;
	
	public TDES(byte[][] keyList) {
		des1 = new DES(keyList[0]);
		des2 = new DES(keyList[1]);
		des3 = new DES(keyList[2]);
	}
	
	public TDES() {
		des1 = new DES();
		des2 = new DES();
		des3 = new DES();
	}
	
	//MODE initializer
	public TDES(String mode, byte[][] keyList, BitString[] inVectors) {
		des1 = new DES(mode, keyList[0], inVectors[0]);
		des2 = new DES(mode, keyList[1], inVectors[1]);
		des3 = new DES(mode, keyList[2], inVectors[2]);
	}
	
//	public BitString encrypt(String plaintext) {
//		BitString ciphertext = des3.encrypt(des2.decrypt(des1.encrypt(plaintext)));
//		
//		return ciphertext;
//	}
	
	//encrypts plaintext
		public BitString encrypt(String plaintext) {
			BitString[] bitBlocks = getBitBlocks(plaintext);
			
			BitString returnBlock = new BitString(0);
			
			
			if (mode.equals("ECB")) {
				//Electronic Code Book
				for (int i = 0; i < bitBlocks.length; i++) {
					returnBlock = returnBlock.concat(processBlock(bitBlocks[i], keySchedule));
				}
			} else if (mode.contentEquals("CBC")) {
				//Cipher Block Chaining
				BitString chain = inVector;
				
				for (BitString block : bitBlocks) {
					block = block.xor(chain);
					
					BitString ciphertext = processBlock(block, keySchedule);
					
					returnBlock = returnBlock.concat(ciphertext);
					chain = ciphertext;
				}
			} else if (mode.equals("CFB")) {
				//Cipher Feedback
				BitString chain = inVector;
				
				for (BitString block : bitBlocks) {
					BitString ciphertext = processBlock(chain, keySchedule).xor(block);
					
					chain = ciphertext;
					returnBlock = returnBlock.concat(ciphertext);
				}
			} else if (mode.equals("OFB")) {
				//Output Feedback
				BitString chain = inVector;
				
				for (BitString block: bitBlocks) {
					BitString ciphertext = processBlock(chain, keySchedule);
					chain = ciphertext;
					
					ciphertext = ciphertext.xor(block);
					
					returnBlock = returnBlock.concat(ciphertext);
				}
			} else if (mode.equals("CTR")) {
				//counter mode
				int counter = 0;
				BitString chain = inVector.subString(0, 56).concat(new BitString((byte) counter));
				
				for (BitString block : bitBlocks) {
					BitString ciphertext = processBlock(chain, keySchedule).xor(block);
					
					counter++;
					
					chain = chain.subString(0, 56).concat(new BitString((byte) counter));
					
					returnBlock = returnBlock.concat(ciphertext);
				}
			} 
			
			return returnBlock;
		}
	
	public String decrypt(BitString ciphertext) {
		String cleartext = des1.decrypt(des2.encrypt(des3.decrypt(ciphertext)));
		
		return cleartext;
	}
}
