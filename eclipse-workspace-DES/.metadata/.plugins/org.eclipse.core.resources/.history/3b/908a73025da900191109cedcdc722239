
public class BitString {
	private Bit[] bits;
	public int length;
	
	//bit array constructor
	public BitString(Bit[] bits) {
		setBits(bits);
		this.length = bits.length;
	}
	
	public BitString(byte[] bytes) {
		int bitLength = 8 * bytes.length;
		
		//instantiate the bit array
		bits = initBits(new Bit[bitLength]);
		
		int byteNum = 0;
		for (int i = 0; i < bitLength; i++) {
			int index = i % 8;
			
			//acquire index value from the byteNum byte
			int value = (bytes[byteNum] >> index) & 1;

			//populate bitArray 
			
			//reverses order of bits in each individual byte because we read bits little-endian
			int index_to_change = (((byteNum + 1) * 8) - index) - 1;
			setBit(index_to_change, value);
			
			if (i % 8 == 0 && i != 0) {
				byteNum++;
			}
		}
		
		this.length = bits.length;
	}
	
	public BitString(int length) {
		bits = initBits(new Bit[length]);
		
		this.length = length;
	}
	
	private Bit[] initBits(Bit[] b) {
		for (int i = 0; i < b.length; i++) {
			b[i] = new Bit();
		}
		
		return b;
	}
	
	public void leftShift() {	
		//store first bit to wrap to back
		Bit firstBit = getBits()[0];
		
		//move each bit to index 1 lower
		for (int i = 1; i < length; i++) {
			setBit(i - 1, getBit(i));
		}
		//wrap first bit to the back
		setBit(length - 1, firstBit);
	}
	

	public Bit[] getBits() {
		return bits;
	}

	public void setBits(Bit[] bits) {
		this.bits = bits;
	}
	
	public void setBit(int index, int value) {
		bits[index].setValue(value);
	}
	
	public void setBit(int index, Bit bit) {
		bits[index] = bit;
	}
	
	public Bit getBit(int index) {
		return bits[index];
	}
	
	public String toString() {
		String s = "";
		
		for (Bit b : bits) {
			s = s + b.getValue();
		}
		
		return s;
		
	}
	
}
