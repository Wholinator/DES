import java.util.Random;

public class DES {
	private byte[] key;
	private Random rand;
	private BitString[] keySchedule;
	private String mode;
	private BitString inVector;
	
	public DES(byte[] key) {
		setRand();
		setKey(key);
		keySchedule = DESKey.getKeySchedule(this.key);
		mode = "ECB";
	}
	
	public DES(String key) {
		setRand();
		
		byte[] b = key.getBytes();
		if (b.length == 7) {
			setKey(b);
		} else {
			System.out.println("Key not valid length: Generating new key");
			setKey(DESKey.genKey());
		}
		
		keySchedule = DESKey.getKeySchedule(this.key);
		mode = "ECB";
	}
	
	public DES() {
		setRand();
		setKey(DESKey.genKey());
		keySchedule = DESKey.getKeySchedule(this.key);
		mode = "ECB";
	}
	
	//MODE initializer
	public DES(String mode, byte[] key, BitString inVector) {
		this.mode = mode;
		this.inVector = inVector;
		
		setRand();
		setKey(key);
		keySchedule = DESKey.getKeySchedule(this.key);
		
		if (mode.equals("3DES")) {
			key2 = inVector.getBytes();
			key3 = DESKey.genKey();
		}
	}

	
	//encrypts plaintext
	public BitString encrypt(String plaintext) {
		BitString[] bitBlocks = getBitBlocks(plaintext);
		
		BitString returnBlock = new BitString(0);
		
		
		if (mode.equals("ECB")) {
			//Electronic Code Book
			for (int i = 0; i < bitBlocks.length; i++) {
				returnBlock = returnBlock.concat(processBlock(bitBlocks[i], keySchedule));
			}
		} else if (mode.contentEquals("CBC")) {
			//Cipher Block Chaining
			BitString chain = inVector;
			
			for (BitString block : bitBlocks) {
				block = block.xor(chain);
				
				BitString ciphertext = processBlock(block, keySchedule);
				
				returnBlock = returnBlock.concat(ciphertext);
				chain = ciphertext;
			}
		} else if (mode.equals("CFB")) {
			//Cipher Feedback
			BitString chain = inVector;
			
			for (BitString block : bitBlocks) {
				BitString ciphertext = processBlock(chain, keySchedule).xor(block);
				
				chain = ciphertext;
				returnBlock = returnBlock.concat(ciphertext);
			}
		} else if (mode.equals("OFB")) {
			//Output Feedback
			BitString chain = inVector;
			
			for (BitString block: bitBlocks) {
				BitString ciphertext = processBlock(chain, keySchedule);
				chain = ciphertext;
				
				ciphertext = ciphertext.xor(block);
				
				returnBlock = returnBlock.concat(ciphertext);
			}
		} else if (mode.equals("CTR")) {
			//counter mode
			int counter = 0;
			BitString chain = inVector.subString(0, 56).concat(new BitString((byte) counter));
			
			for (BitString block : bitBlocks) {
				BitString ciphertext = processBlock(chain, keySchedule).xor(block);
				
				counter++;
				
				chain = chain.subString(0, 56).concat(new BitString((byte) counter));
				
				returnBlock = returnBlock.concat(ciphertext);
			}
		} else if (mode.equals("3DES")) {
			BitString[] keySchedule2 = DESKey.getKeySchedule(key2);
			BitString[] keySchedule3 = DESKey.getKeySchedule(key3);
			
			for (BitString block : bitBlocks) {
				BitString ciphertext = processBlock(block, keySchedule);
				ciphertext = processBlock(ciphertext, reverseKeySchedule(keySchedule2));
				ciphertext = processBlock(ciphertext, keySchedule3);
				
				
			}
		}
		
		return returnBlock;
	}
	
	public String decrypt(BitString ciphertext) {
		BitString[] blocks = ciphertext.getBlocks(64);
		BitString returnBlock = new BitString(0);
		
		BitString[] reversedKeySchedule = reverseKeySchedule(keySchedule);
		
		if (mode.contentEquals("ECB")) {
			//Electronic CodeBook
			for (int i = 0; i < blocks.length; i++) {
				returnBlock = returnBlock.concat(processBlock(blocks[i], reversedKeySchedule));
			}
		} else if (mode.equals("CBC")) {
			//Cipher Block Chaining
			BitString chain = inVector;
			
			for (BitString block : blocks) {
				BitString cleartext = processBlock(block, reversedKeySchedule);
				
				cleartext = cleartext.xor(chain);
				returnBlock = returnBlock.concat(cleartext);
				
				chain = block;
			}
		} else if (mode.equals("CFB")) {
			//Cipher Feedback
			BitString chain = inVector;
			
			for (BitString block : blocks) {
				BitString cleartext = processBlock(chain, keySchedule).xor(block);
				
				chain = block;
				
				returnBlock = returnBlock.concat(cleartext);
			}
		} else if (mode.equals("OFB")) {
			//Output Feedback
			BitString chain = inVector;
			
			for (BitString block : blocks) {
				BitString cleartext = processBlock(chain, keySchedule);
				
				chain = cleartext;
				
				cleartext = cleartext.xor(block);
				
				returnBlock = returnBlock.concat(cleartext);
			}
		} else if (mode.equals("CTR")) {
			//counter mode
			int counter = 0;
			
			BitString chain = inVector.subString(0, 56).concat(new BitString((byte) counter));
			
			for (BitString block : blocks) {
				BitString cleartext = processBlock(chain, keySchedule).xor(block);
				
				counter++;
				
				chain = chain.subString(0, 56).concat(new BitString((byte) counter));
				
				returnBlock = returnBlock.concat(cleartext);
			}
		}
		


		return returnBlock.toString();
	}
	
	public BitString processBlock(BitString block, BitString[] keySchedule) {
		
		int[] initial_permutation = {58, 50, 42, 34, 26, 18, 10, 2,
					                 60, 52, 44, 36, 28, 20, 12, 4,
					                 62, 54, 46, 38, 30, 22, 14, 6,
					                 64, 56, 48, 40, 32, 24, 16, 8,
					                 57, 49, 41, 33, 25, 17, 9,  1,
					                 59, 51, 43, 35, 27, 19, 11, 3,
					                 61, 53, 45, 37, 29, 21, 13, 5,
					                 63, 55, 47, 39, 31, 23, 15, 7};
		
		int[] final_permutation = {40,8,48,16,56,24,64,32,
				                   39,7,47,15,55,23,63,31,
				                   38,6,46,14,54,22,62,30,
				                   37,5,45,13,53,21,61,29,
				                   36,4,44,12,52,20,60,28,
				                   35,3,43,11,51,19,59,27,
				                   34,2,42,10,50,18,58,26,
				                   33,1,41,9 ,49,17,57,25};
		
		
		block = block.applyPermutation(initial_permutation);
		
		BitString blockL = block.subString(0,  32);
		BitString blockR = block.subString(32, 64);
		
		//fiestel cipher
		for (int i = 0; i < 16; i++) {
			BitString tempBlockL = blockR;
			BitString tempBlockR = blockL.xor(fiestel(blockR, keySchedule[i]));
			
			blockL = tempBlockL;
			blockR = tempBlockR;
		}
		
		block = blockR.concat(blockL);
		
		block = block.applyPermutation(final_permutation);
		
		return block;
		
	}

	
	private BitString fiestel(BitString block, BitString roundKey) {
		int[] expansion_permutation = { 32, 1,  2,  3,  4,  5,
						                4,  5,  6,  7,  8,  9, 
						                8,  9,  10, 11, 12, 13,
						                12, 13, 14, 15, 16, 17,
						                16, 17, 18, 19, 20, 21,
						                20, 21, 22, 23, 24, 25,
						                24, 25, 26, 27, 28, 29, 
						                28, 29, 30, 31, 32, 1  };
		
		int[] pbox = {16, 7,  20, 21, 29, 12, 28, 17,
				      1,  15, 23, 26, 5,  18, 31, 10,
				      2,  8,  24, 14, 32, 27, 3,  9,
				      19, 13, 30, 6,  22, 11, 4,  25};
		
		//expansion permutation
		block = block.applyPermutation(expansion_permutation);

		//XOR with key
		block = block.xor(roundKey);
		

		BitString output = new BitString(0);
		
		//run sbox on ever 6bit substring
		for (int i = 0; i < 8; i++) {
			int start = i * 6;
			int end = start + 6;
			
			output = output.concat(sBox(block.subString(start, end), i+1));
		}
		
		//pbox
		output = output.applyPermutation(pbox);
		
		return output;
	}
	
	//transforms a string into an array of byte[8] arrays
	//each byte[8] array is 64 bits and considered a block in DES
	private byte[][] getByteBlocks(String plaintext) {
		byte[] bytes = plaintext.getBytes();
		int numBlocks = (int) Math.ceil(bytes.length / 8.0);
		
		byte[][] blocks = new byte[numBlocks][8];
		
		//counter for bytes
		int c = 0;
		//counter for block
		int block = 0;
		
		//iterate through every byte
		while (c < bytes.length) {
			//get our position in the block
			int byteNum = c % 8;
			
			//set the block:position to the sequential byte
			blocks[block][byteNum] = bytes[c];
			
			//move to the next block
			if (byteNum == 7) {
				block++;
			}
			c++;
		}
		return blocks;
	}
	
	//get an array of 64 bit blocks from plaintext
	private BitString[] getBitBlocks(String plaintext) {
		byte[][] byteBlocks = getByteBlocks(plaintext);
		
		int length = byteBlocks.length;
		
		BitString[] bitBlocks = new BitString[length];
		
		//convert every 8byte array to 64bitstring
		for(int i = 0; i < length; i++) {
			bitBlocks[i] = new BitString(byteBlocks[i]);
		}
		
		return bitBlocks;
	}

	
	//Getter: key
	public byte[] getKey() {
		return key;
	}

	//Setter: key
	public void setKey(byte[] key) {
		this.key = key;
	}
	
	public Random getRand() {
		return rand;
	}

	public void setRand() {
		this.rand = new Random(System.currentTimeMillis());
	}
	
	private BitString[] reverseKeySchedule(BitString[] keySchedule) {
		BitString[] reversedKeySchedule = new BitString[keySchedule.length];
		
		//reverse key schedule for decryption
		for(int i = 0; i < keySchedule.length; i++) {
			reversedKeySchedule[i] = keySchedule[keySchedule.length - i - 1];
		}
		return reversedKeySchedule;
	}
	
	
	private BitString sBox(BitString input, int boxNum) {
		//get the outside two bits
		BitString b1 = input.subString(0,  1);
		BitString b2 = input.subString(input.length-1, input.length);
		byte ends = b1.concat(b2).getBytes()[0];
		
		//get the inside 4 bits
		byte middle = input.subString(1, 5).getBytes()[0];
		
		byte[] returnByte = new byte[1];
		
		//perform the S-Box permutation
		if (boxNum == 1) {
			int[][] permutation = {{14, 4, 13, 1,  2, 15, 11,  8,  3, 10,  6, 12, 5,  9, 0, 7},
					               {0, 15,  7, 4, 14,  2, 13,  1, 10,  6, 12, 11, 9,  5, 3, 8},
					               {4,  1, 14, 8, 13,  6,  2, 11, 15, 12,  9,  7, 3, 10, 5, 0},
					               {15,12,  8, 2,  4,  9,  1,  7,  5, 11,  3, 14, 10, 0, 6, 13}};
			
			returnByte[0] = (byte) permutation[ends][middle];
			
		} else if (boxNum == 2) {
			int[][] permutation = {{15, 1, 8, 14,  6, 11,  3,  4 , 9, 7 , 2, 13, 12, 0,  5, 10},
				                   {3, 13, 4,  7, 15,  2,  8, 14, 12, 0,  1, 10,  6, 9, 11, 5},
				                   {0, 14, 7, 11, 10,  4, 13,  1,  5, 8, 12,  6,  9, 3,  2, 15},
				                   {13, 8, 10, 1,  3, 15,  4,  2, 11, 6,  7, 12,  0, 5, 14, 9}};

			returnByte[0] = (byte) permutation[ends][middle];
			
		} else if (boxNum == 3) {
			int[][] permutation = {{10, 0, 9, 14, 6,  3, 15, 5,  1, 13, 12, 7,  11,  4,  2, 8},
					               {13, 7, 0,  9, 3,  4,  6, 10, 2, 8,   5, 14, 12, 11, 15, 1},
					               {13, 6, 4,  9, 8, 15,  3, 0, 11, 1,   2, 12,  5, 10, 14, 7},
					               {1, 10, 13, 0, 6,  9,  8, 7,  4, 15, 14, 3,  11,  5,  2, 12}};

			returnByte[0] = (byte) permutation[ends][middle];
			
		} else if (boxNum == 4) {
			int[][] permutation = {{7, 13, 14, 3, 0,   6, 9, 10,  1, 2, 8,  5, 11, 12,  4, 15},
					               {13, 8, 11, 5, 6,  15, 0,  3,  4, 7, 2, 12,  1, 10, 14, 9},
					               {10, 6, 9,  0, 12, 11, 7, 13, 15, 1, 3, 14 , 5,  2,  8, 4},
					               {3, 15, 0,  6, 10,  1, 13, 8,  9, 4, 5, 11, 12,  7,  2, 14}};

			returnByte[0] = (byte) permutation[ends][middle];
			
		} else if (boxNum == 5) {
			int[][] permutation = {{2,  12, 4,  1, 7,  10, 11, 6, 8,  5, 3,  15, 13, 0, 14, 9},
					               {14, 11, 2, 12, 4,   7, 13, 1, 5,  0, 15, 10, 3,  9, 8,  6},
					               {4,   2, 1, 11, 10, 13, 7,  8, 15, 9, 12,  5, 6,  3, 0, 14},
					               {11,  8, 12, 7, 1,  14, 2, 13, 6, 15, 0,   9, 10, 4, 5,  3}};


			returnByte[0] = (byte) permutation[ends][middle];
			
		} else if (boxNum == 6) {
			int[][] permutation = {{12,  1, 10, 15, 9, 2,  6, 8,   0, 13, 3, 4, 14,  7, 5,  11},
					               {10, 15, 4,   2, 7, 12, 9, 5,   6, 1, 13, 14, 0, 11, 3,  8},
					               {9,  14, 15,  5, 2, 8, 12, 3,   7, 0,  4, 10, 1, 13, 11, 6},
					               {4,   3, 2,  12, 9, 5, 15, 10, 11, 14, 1,  7, 6,  0, 8,  13}};


			returnByte[0] = (byte) permutation[ends][middle];
			
		} else if (boxNum == 7) {
			int[][] permutation = {{4, 11, 2,  14, 15, 0, 8, 13, 3,  12, 9, 7,  5, 10, 6, 1},
					               {13, 0, 11,  7, 4,  9, 1, 10, 14,  3, 5, 12, 2, 15, 8, 6},
					               {1,  4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8,  0,  5, 9, 2},
					               {6, 11, 13,  8, 1,  4, 10, 7, 9,   5, 0, 15, 14, 2, 3, 12}};


			returnByte[0] = (byte) permutation[ends][middle];
			
		} else if (boxNum == 8) {
			int[][] permutation = {{13, 2,  8, 4, 6, 15, 11, 1, 10, 9,  3, 14, 5,  0, 12, 7},
					               {1, 15, 13, 8, 10, 3, 7,  4, 12, 5,  6, 11, 0, 14, 9,  2},
					               {7, 11,  4, 1, 9, 12, 14, 2, 0,  6, 10, 13, 15, 3, 5,  8},
					               {2,  1, 14, 7, 4, 10, 8, 13, 15, 12, 9,  0, 3,  5, 6,  11}};

			returnByte[0] = (byte) permutation[ends][middle];
		}
		
		//transform into bitstring and take only last 4 bits
		return new BitString(returnByte).subString(4, 8);
	}
	
}
